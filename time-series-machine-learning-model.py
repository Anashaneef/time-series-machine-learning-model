# -*- coding: utf-8 -*-
"""proyek2_time_series_forecasting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p2Lh97hG8-QtVMUdPyEqo7RTtFjdDAMH

Nama = Anas Fikri Hanif\
SIB ID = M183X0321

**Import Library**
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split

"""**Menyaipkan Dataset**"""

df = pd.read_csv('AEP_hourly.csv')
df

df.info()

"""**Membuat Plot**"""

date = df['Datetime'].values
consumption = df['AEP_MW'].values # energy consumption

plt.figure(figsize=(18, 5))
plt.plot(date, consumption)
plt.title('American Electric Power')

"""**Data Scaler**"""

consumption = consumption.reshape(-1, 1)

minmax_scaler = MinMaxScaler()
scaled_consumption = minmax_scaler.fit_transform(consumption)
scaled_consumption = scaled_consumption.reshape(1, -1)
scaled_consumption = np.hstack(scaled_consumption)

"""**Splitting Train dan Test**"""

# data validation sebesar 20%
x_train, x_test, y_train, y_test = train_test_split(date, scaled_consumption, test_size=0.2, random_state=1, shuffle=False)

"""**Formatting Data**"""

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
  series = tf.expand_dims(series, axis=-1)
  ds = tf.data.Dataset.from_tensor_slices(series)
  ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
  ds = ds.flat_map(lambda w: w.batch(window_size + 1))
  ds = ds.shuffle(shuffle_buffer)
  ds = ds.map(lambda w: (w[:-1], w[-1:]))
  return ds.batch(batch_size).prefetch(1)

"""**Modelling Data**"""

train_set = windowed_dataset(y_train, window_size=90, batch_size=100, shuffle_buffer=1000)
val_set = windowed_dataset(y_test, window_size=90, batch_size=100, shuffle_buffer=1000)

model = tf.keras.models.Sequential([
    tf.keras.layers.LSTM(60, return_sequences=True),
    tf.keras.layers.LSTM(60),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(256, activation='relu'),
    tf.keras.layers.Dense(1)
])

optimizer = tf.keras.optimizers.SGD(lr=1.000e-01, momentum=0.9)

model.compile(loss='Huber',
              optimizer = optimizer,
              metrics = ['mae'])

"""**Pembuatan Callback**"""

# mencari 10% skala data
data_scale = (max(scaled_consumption) - min(scaled_consumption)) * 0.1
print(data_scale)

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if (logs.get('mae') < data_scale) and (logs.get('val_mae') < data_scale):
      self.model.stop_training = True,
      print('\nMAE mencapai dibawah 10% dari skala data!')

callbacks = myCallback()

"""**Fitting Data**"""

history = model.fit(
    train_set, 
    epochs = 100,
    validation_data = val_set,
    verbose = 2,
    callbacks = [callbacks]
)

"""**Pembuatan Plot MAE dan Plot Loss**"""

# plot mae
plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('MAE Model')
plt.ylabel('MAE')
plt.xlabel('Epoch')
plt.legend(['train', 'test'], loc = 'upper left')
plt.show()

# plot loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['train', 'test'], loc = 'upper left')
plt.show()